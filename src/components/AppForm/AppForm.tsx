import React, {useState, useEffect} from "react";
import { Application, IApplication } from "../../models/Application";
import { v4 as uuidv4 } from "uuid";
import { toast } from "react-toastify";

type AppFormProps = {
  onSave: (app: IApplication) => void;
}

const AppForm: React.FC<AppFormProps> = ({ onSave }) => {
  const [title, setTitle] = useState<string>("");
  const [route, setRoute] = useState<string>("");
  const [autoGeneratedRoute, setAutoGeneratedRoute] = useState<string>("");
  const [titleError, setTitleError] = useState<string | null>(null);
  const [routeError, setRouteError] = useState<string | null>(null);

  useEffect(() => {
    try {
      const generatedRoute = Application.generateRoute(title);
      setAutoGeneratedRoute(generatedRoute);
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error("An unknown error occurred.");
      }
      setAutoGeneratedRoute("");
    }
  }, [title]);

  const displayRoute = route || autoGeneratedRoute;

  const handleSubmit = () => {
    setTitleError(null);
    setRouteError(null);

    if (!title) {
      setTitleError("Title is required.");
      return;
    }

    let finalRoute = route;

    try {
      if (!route) {
        finalRoute = Application.generateRoute(title);
      } else {
        Application.generateRoute(route);
      }
    } catch (error) {
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error("An unknown error occurred.");
      }
      return;
    }

    if (!/^[\w-]+$/.test(finalRoute)) {
      setRouteError("The route contains invalid characters.");
      return;
    }

    const newApp: IApplication = {
      id: uuidv4(),
      title: title,
      route: finalRoute,
    };

    onSave(newApp);
  };

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        handleSubmit();
      }}
      className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
    >
      <div className="mb-4">
        <label
          className="block text-gray-700 text-sm font-bold mb-2"
          htmlFor="appName"
        >
          Ttitle:
        </label>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          id="appName"
          className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          placeholder="Application name"
        />
        {titleError && (
          <p className="text-red-500 text-xs italic">{titleError}</p>
        )}
        <label className="block mb-2 text-sm font-bold">
          Route:
          <input
            value={displayRoute}
            onChange={(e) => setRoute(e.target.value)}
            className="w-full mt-1 p-2 border rounded-md"
            placeholder="Route (optional)"
          />
          {routeError && (
            <p className="text-red-500 text-xs italic">{routeError}</p>
          )}
        </label>
      </div>
      <button
        type="submit"
        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
      >
        Create
      </button>
    </form>
  );
};

export default AppForm;
